

Примеры запросов и функций.
WHERE onum BETWEEN 3000 AND 3100; - Интервал значений.
WHERE _ - Нижнее подчёркивание означает обязательное присутствие одного символа.
WHERE city LIKE 'N%'; - % означает произвольное количество символов.
LENGHT(str) - Определяет длину строки.
UPPER(str) - Всё в верхнем регистре.
LOWER(str) - Всё в нижнем регистре.
INITCAP(str) - Все заглавные.
CONCAT(str, str) или || - Сцепка двух сторок.
SUBSTER(str, ind, count=len(str)) - Забирает символы из текста. 
SUBSTER("Hello", 3, 2); Результат: "ll"
INSTR(str, symbol, ind=1, count=1) - Место вхождения элемента.
INSTR("translate", "a", 2, 2); Результат: 7
SYSDATE - Дата сегодня.

ROUND(column, 1) - Округление до десятых в большую сторону.
TRUNC(column, 1) - Округление до десятых в меньшую сторону.
REMAINDER(column, 2) - Находит чесло ближайшее к первому и кратное второму и вычитает из него первое.
MOD(column, 2) - использует ближайшее меньшее значение.

NVL(column, arg) - Заменяет значения null на arg.
NULLIF(var_1, var_2) - Сравнивает два значения и если они совпадают, возвращает null, если нет, то первое значение.

CASE END- Позволяет проверить несколько условий и в случае выполнения первого из них, вывести соответствующий результат.
CASE
WHEN age<20 THEN 'Child'
WHEN age<60 THEN 'Man'
ELSE 'Oldman'
END as or_group

DECODE() - Позволяет сравнить выражения со списком значений и вывести в зависимости от этого результат.
DECODE(TRUNC(order / 1000),
0, 'group_1',
1, 'group_2',
'group_3') as or_group


Типы соединения таблиц. 
INNER JOIN и NATURAL JOIN
NATURAL JOIN == select sale from table_1 using(table_2);
OUTER JOIN и CROSS JOIN

ANY и ALL
SELECT * FROM orders
WHERE amt > ALL
(SELECT amt FROM orders
WHERE snum = 1001); - Остались только заказы, с суммами более, чем максимальная из сумм 1001-го продавца.

UNION - Объединение оставляя только уникальные значения.
SELECT snum FROM orders WHERE amt > 100
UNION
SELECT snum FROM orders WHERE rating > 200; - Список продавцов, у которых суммы более 100 и рейтинг более 200.
Если есть необходимость сохранить дубликаты и значения null, то пишут UNION ALL.
Если есть необходимость показать только дубликаты, то UNION меняют на INTERSECT.
Если использовать MINUS - то в результате остануться только результаты первого минус результаты второго запроса.


Запросы с WITH
С помощью оператора WITH, задаётся временно именованный результирующий набор,
называемым - обобщённым табличным выражением.
Пример.
По сути здесь мы создаём новую таблицу (с полями snum, number_of_orders), на
основе запроса к таблицу orders.
WITH sales_order_count (snum, number_of_orders)
AS
(SELECT snum, COUNT(*) as number_of_orders
FROM orders
Group BY snum)
SELECT snum, number_of_orders FROM sales_order_count
WHERE number_of_orders > 1 ORDER BY snum;
Оставляем только продавцов с количеством заказову более 1 и
отсортируем их по возрастанию кода продавца.


Rownum - псевдостолбец, показывающий порядковый номер строки текущего
результата запроса.
Пример.
SELECT onum, amt FROM 
# Выбрали продавцов у которых сумма заказа больше 100 и отстортировали их по номеру заказа.
(SELECT * FROM orders WHERE amt > 100 ORDER BY onum)
# Показали только 2 первые строчки данного запроса.
WHERE rownum <= 2;

Rownumber - позволяет присвоить записи номер, который она бы получила,
если бы результаты отсортировали по какому либо столбцу. Вне зависимости
от фактической сортировки результатов.
Пример.
SELECT onum, amt 
# Добавление поля отображающее рейтинг по сумме заказа.
ROW_NUMBER() over (ORDER BY amt DESC) AS order_rating
# Записи, всё еще отсортированы по номеру заказа.
FROM (SELECT * FROM orders WHERE amt > 100 ORDER BY onum);


Создание таблыци.
CREATE TABLE my_table (			-- Проверка при добовления записей в колонку на:
column_1 NUMBER UNIQUE,			-- Уникальность
column_2 NUMBER NOT NULL,		-- Наличия значения
column_3 NUMBER CHECK (column_3 > 0) );	-- Соблюдения условия (значение больше 3)


Работа с ограничениями.
Присваивание названия ограничению
CREATE TABLE my_table (			-- Присваиваем ограничению имя.
CONSTRAINT check_column_3_positive CHECK (column_3 > 0) );

-- Демонстрация названий ограничений в таблице и их тип.
SELECT * FROM DBA_CONSTRAINTS WHERE table_name = 'my_table'; 

-- Демонстрация, к каким столбцам в таблице применены ограничения.
SELECT * FROM DBA_CONS_COLUMNS WHERE table_name = 'my_table'; 

-- Деактивация ограничения. Удаляем ограничений с 3-го столбца таблицы.
ALTER TABLE my_table DROP CONSTRAINT check_column_3_positive;

-- Добавление ограничения в уже существующую таблицу.
ALTER TABLE my_table ADD CONSTRAINT check_column_3_positive CHECK (column_3 > 0);

-- Переименовывание ограничения.
ALTER TABLE my_table RENAME CONSTRAINT name_const TO new_name_const;


Первичные и внешние ключи.
Создание таблицы с первичным ключом.
CREATE TABLE my_table_a (			
column_1 NUMBER PRIMARY KEY,	-- Значение первичного ключа, должны быть уникальны.	
column_2 NUMBER );		

Создание таблицы с внешним ключом.
CREATE TABLE my_table_b (			
column_1 NUMBER REFERENCES my_table_a(column_1),		
column_2 NUMBER );	


Создание последовательностей SEQUENCE.
CREATE SEQUENCE table_a_seq	-- Нвзвание последовательности.
MINVALUE 1			-- Минимальное значение.
START WITH			-- Первое значение.
INCREMENT BY 1			-- Шаг, увеличения каждого следующего значения.
CACHE 20;			-- Кол-во значений кэшируемых в памяти.

CREATE TABLE table_a (
id NUMBER PRIMARY KEY,
column_2 NUMBER);
INSERT INTO table_a (id, column_2) VALUES (table_a_seq.nextval, 1) ;











Сэр Тимоти Джон Бе́рнерс-Ли OM (8 июня 1955 года, Лондон) — британский информатик, наиболее известный как создатель URI, URL, HTTP, HTML и Всемирной паутины (совместно с Робертом Кайо) и действующий глава Консорциума Всемирной паутины.

Предпосылки стандартизации сетей
(проблемы создания крупной сети):
	- Надёжность
		- Ошибки при передаче данных
			- Искажение передаваемых данных
			- Потеря сообщений
			- Нарушение порядка передачи сообщений
		- Поиск рабочего пути через сеть
			- Несколько путей от отправителя к получателю
			- Часть оборудования может выходить из строя
	- Развитие 
		- Масштабируемость
			- Рост числа устройств в сети
		- Объединение сетей
			- Разные механизмы ардесации
			- Разные размеры сообщеиний
	- Распределение ресурсов
		- Распределение пропускной спобобности сети
			- Статическое (управление пропускной спобобности устройств, например 10Мбит/сек)
			- Динамическое (выделение сети тем, кто её использует сейчас)
		- Управление потоком
			- Затопление: быстрый отправитель перегружает данными медленного получателя
			- Скопление: перегрузка сети большим кол-вом одновременных отправителей
	- Качество обслуживания
		- Видео, голос
			- Минимальная задержка
			- Допустимы небольшие искажения
		- Передача файлов
			- Отсутсвие искажения данных
			- Задержки допустимы
	- Безопасность
		- Перехват информации
		- Поддельные узлы сети (ресурсы)
		- Исменение сообщений
	- Энергетическая эффективность
		- Современные сетевые устройства
		- Экономичная работа при передачи информации по сети
		
		
Терминология ком. сетей
	- Сервис
		- Определяет, что делает тот или иной уровень
		(Что делает уровень)
	- Интерфейс
		- Набор примитивных операций, предоставляемых нижним уровнем верхнему
		(Как использовать возможности уровня)
	- Протокол
		- Правила и соглашения, которые используются для связи уровней двух устройств
		(Как уровень реализует возможности)
		- Реализуются через зоголоки сообщений
		(Заголовок - средство виртуального общения между уровнями)
	- Инкапсуляция
	- Стек протоколов
		- Набор иерархических протоколов, достаточных для организации сетевого взаимодействия
	- Архитектура сети
		- Набор уровней и протоколов

Модель OSI (Модель взаимодействия открытых систем):
	- Прикладной (Application) (HTTP/HTTPS, FTP, DNS, DHCP, Telnet, SSH, WebSocket)
		- Набор приложений, полезных пользователям
			- Видео и аудио связь
			- Гипертекстовые Web-страницы
			- Мессенджеры
			- Электронная почта
		- Наверное, это самый понятный для всех уровень. Как раз на этом уроне работают привычные для нас приложения — e-mail, браузеры по протоколу HTTP, FTP и остальное.
	- Представления (Presentation) (SSL/TLS (шифрование), JPEG, PNG, MPEG (форматы данных), ASCII, Unicode (кодирование текста))
		- Обеспечивает согласование синтаксиса и семантики передаваемых данных
			- Форматы представления символов
			- Форматы чисел
		- Шифрование и дешифровние
		(TLS Transport Layer Security)
		- Он структурирует информацию в читабельный вид для прикладного уровня. Например, многие компьютеры используют таблицу кодировки ASCII для вывода текстовой информации или формат jpeg для вывода графического изображения.
	- Сеансовый (Session) (NetBIOS)
		- Позволяет устанавливать сеансы связи
			- Управление диалогом (очередность)
			- Управление маркерами 
			(предотвращения одновременного выполнения критической операции)
			- Синхронизация
			(возможность возобновления передачи после сбоя с места остановки)
		- Роль этого уровня в установлении, управлении и разрыве соединения между двумя хостами. К примеру, когда открываете страницу на веб-сервере, то Вы не единственный посетитель на нем. И вот для того, чтобы поддерживать сеансы со всеми пользователями, нужен сеансовый уровень.
	- Транспортный (Transport) (TCP, UDP, SCTP)
		- Обеспечивает передачу данных между процессами на устройствах с требуемым уровнем надёжности (между разными программами)
		- Сообщения доставляются от отправителя к получателю
		- Сетенезависимый уровень
		(Неважно какое сетевое оборудование у устройств)
		- Этот уровень берет на себя функцию транспорта. К примеру, когда вы скачиваете файл с Интернета, файл в виде сегментов отправляется на Ваш компьютер. Также здесь вводятся понятия портов, которые нужны для указания назначения к конкретной службе. На этом уровне работают протоколы TCP (с установлением соединения) и UDP (без установления соединения).
	- Сетевой (Network) (IP, ICMP)
		- Объединение нескольних сетей в крупную сеть
			- Адресация
			- Определение маршрута отправки пакетов
			- Согласование характеристик сетей
		- Этот уровень берет на себя объединения участков сети и выбор оптимального пути (т.е. маршрутизация). Каждое сетевое устройство должно иметь уникальный сетевой адрес в сети. Думаю, многие слышали про протоколы IPv4 и IPv6. Эти протоколы работают на данном уровне.
	- Канальный (Data Link) (Ethernet, MAC-адреса, VLAN)
		- Обеспечивает прозрачность соединения
			- Установка логического соединения
			- Согласование скоростей передатчика и приёмника
			- Обеспечение надёжности передачи, обнаружение и коррекция ошибок
		- В широковещательной сети
			- Управление доступом к среде передачи данных
			- Физическая адресация
		- Передача кадров
		- Он берет на себя задачу адресации в пределах локальной сети, обнаруживает ошибки, проверяет целостность данных. Если слышали про MAC-адреса и протокол «Ethernet», то они располагаются на этом уровне.
	- Физический (Physical) (Ethernet, USB, Bluetooth, Wi-Fi)
		- Занимается передачей битов по физическому каналу связи
		- Определяет метод передачи данных, какая среда используется (передача электрических сигналов, световых импульсов или радиоэфир), уровень напряжения, метод кодирования двоичных сигналов.
	
	
Модель TCP/IP (в некоторых источниках DoD):
Взаимодействует с подсетями разных технологий
	- Прикладной (Application)
		HTTP \ DNS \ SMTP \ WS \ FTP \ TFTP \ DHCP \ Telnet, SSH (удаленное управление)
		- Взаимодействие сетевых приложений
		- Изолирован от сетевого оборудования
	- Транспортный (Transport)
		TCP \ UDP \ SCTP \ QUIC (используется в HTTP/3)
	- Интернет (Internet) 
		IP \ ICMP
	- Сетевых интерфейсов (Network Access)
		WI-Fi \ Ethernet \ USB \ Bluetooth \ ARP \ MAC-адреса
		
Альтернативные стеки (не используются):
 - IPX/SPX
 - AppleTalk
	

Web Socket (WS)
Служит для двунаправленной асинхронной передачи данных для Web.
Данные передаются в виде "кадров" (frames)
Типы кадров:
	- Текстовые кадры (кодировка UTF-8)
	- Бинарные кадры
	- Управляющие кадры
Поддерживают фрагментацию (для передачи нескольких кадров кадров)
Используются запросы "ping pong"
	- для уточнения, что другая сторона соединения всё ещё функционирует
	- поддерживать TCP соединение открытым, если клиент и сервер соединены не напрямую, а через:
		- прокси сервер
		- балансировщие нагрузки
Для разрыва соединения используются управляющие кадры типа close
Постоянное соединение TCP
Порты: 80/443
Префикс URI ws/wss  (ws://www.example.com)
```
GET / chat HTTP/1.1
Host: www.example.com
Upgrade: websocket
Connection: Upgrade
Sec-WebSocket-Key: dfdHGHJGGJ - 16 байтовый клюс для защиты от фальшивых запросов
```
Альтернативы WS:
 - Poling (периодическая отправка сообщений на сервер)
 - Long poll (отправка сообщения, ответ на которое придёт только, после изменения состояния сервера и соединение закроется)
	
	
Protocol Buffers (Protobuf)
Протокол сериализации (передачи) структурных данных.
В общем виде формат представляет собой закодированную последовательность полей, состоящих из ключа и значения.
* Google 2008 год (эффективная бинарная альтернатива XML)	
 - проще
 - от 3 до 10 раз меньше
 - от 20 до 100 раз быстрее
 - более однозначный
 - прозволяет создавать классы, которые в дальнейшем легче использовать программно
 
	
URI Uniform Resource Identifier (унифицированный (единообразный) идентификатор ресурса)
	
URL Uniform Resource Locator (единообразный указатель местонахождения ресурса)
URL — это URI, который, помимо идентификации ресурса, предоставляет ещё и информацию о местонахождении этого ресурса.

URN Uniform Resource Name (единообразное название (имя) ресурса)
URN — это URI, который только идентифицирует ресурс в определённом пространстве имён (и, соответственно, в определённом контексте), но не указывает его местонахождение.


HTTP
Метод /  URL  / Версия
POST  / ip.ru / 1.1
Заголовки / Headers:
 - Host: ip.ru
 - Content-Type: application/json
 - Content-Lenght: 26
Тело сообщения / Body:
 {
	"login": "user", 
	"password": "qwerty"
 }


HTTP/2 
 - определяет оптимизированную семантику протокола HTTP
 - позволяет выполнять чередование запросов и ответов через то же подключение и предоставляет эффективное кодирование полей HTTP-заголовка
 - позволяет приоритизировать запросы, позволяя более важным запросам выполняться быстрее
 - более дружественным к сети, требуя установки меньшего количества TCP–соединений в сравнении с HTTP/1.x, что приводит к более эффективному использованию сети

TCP (передача сегментов)

UPD (передача датаграммов)

IP (передача пакетов)

SSL Secure Sockets Layer (уровень защищённых сокетов) — криптографический протокол, который подразумевает более безопасную связь между хостом и клиентом.

TLS transport layer security — (Протокол защиты транспортного уровня) криптографические протоколы, обеспечивающие защищённую передачу данных между узлами в сети Интернет. 
TLS и SSL используют асимметричное шифрование для аутентификации, симметричное шифрование для конфиденциальности и коды аутентичности сообщений для сохранения целостности сообщений.


REST (REpresentational State Transfer — «передача репрезентативного состояния») - архитектурный стиль взаимодействия компонентов распределенного приложения в сети.
Cервер не обязан сохранять информацию о состоянии клиента («клиентской сессии»), при каждом запросе от клиента общаясь с ним как в первый раз.
Минус - ответом является сериализация и десиреализация данных в JSON.
* термин «REST» был введён Роем Филдингом, одним из создателей протокола «HTTP», лишь в 2000 году.

SOAP (Simple Object Access Protocol) — протокол доступа к объектам.
* Используется для удалённого вызова процедур используя формат XML.
Протокол обмена структурированными сообщениями в распределённой вычислительной среде.
SOAP является расширением протокола XML-RPC.	
SOAP может использоваться с любым протоколом прикладного уровня: SMTP, FTP, HTTP, HTTPS и др.
 - Envelope — корневой элемент, который определяет сообщение и пространство имен, использованное в документе.
 - Header — содержит атрибуты сообщения, например: информация о безопасности или о сетевой маршрутизации.
 - Body — содержит сообщение, которым обмениваются приложения.
 - Fault — необязательный элемент, который предоставляет информацию об ошибках, которые произошли при обработке сообщений.
Oxygen - редактор для SOAP.
SoapUI - тестирование SOAP.
 
WSDL (Web Services Description Language) – это язык на основе XML, который используется для описания веб-сервисов. В WSDL-документе содержится информация о местонахождении сервиса и доступных методах (операциях).
WSDL-документ – это «капелька магии» в мире SOAP. Его можно сгенерировать из классов для сервера, а уже из него можно создать классы для клиента. Главное – не забывать проверять адекватность и доступность WSDL-документа для пользователей.

GraphQL — язык запросов данных и язык манипулирования данными с открытым исходным кодом для построения веб ориентированных программных интерфейсов. GraphQL был разработан как внутренний проект компании Facebook в 2012 году, а позднее в 2015 году был выпущен публично.
Позволяет в запросе описать (человечески понятным языком) и фильтры и атрибуты. И теперь когда к нам снова приходят аналитики с запросом на новую ручку, то нам не нужно её писать, а лишь немного поменять синтаксис запроса на GraphQL.
Глубина его сложности, намного больше чем у REST.
Минусы - работа с ошибками и их обработкой.

gRPC (Remote Procedure Call - Удалённый вызов процедур)
gRPC - действия, REST - сущности.
Работает поверх протокола прикладного уровня HTTP/2
* Google 2015 год (в том же году как и HTTP/2), написан на С++.
 - Поддержка как одночных выховов, так и стриминга.
 - Наличие метаданных (вместе с полезной нагрузкой, можно передать условно, заголовки).
 - Поддержка отмены запроса и таймаутов из коробки.
Фичи: строгая типизация
 - сообщения - proto message
 - есть поддержка базовых примитивных типов и строк
 - поддержка скаляров и векторов данных
 - сообщения могут содержать другие сообщения
Фичи: обратная совместимость
 - возможность значений по умолчанию
 - новые поля появляются прозрачно для протребителя
 - все поля опциональные, чтение удалённого поля не вызывает ошибки
Фичи: клиент и сервер из коробки
 - код клиента и шаблон для сервера генрируется на основе proto
 - возможно использовать синхронный и асинхронный клиенты
 - это возможно для любого языка
Фичи: отмена запроса и дедлайны
 - запрос можно отменить на клиенте и сервере
 - есть возможность выставить таймаут на запрос на клиенте
 - поддержан механизм обнаружения таймаута или отмены на сервере
 
Cookie используются веб-серверами для идентификации пользователей и хранения данных о них.
Области применения:
 - аутентификации пользователя;
 - хранения персональных предпочтений и настроек пользователя;
 - отслеживания состояния сеанса доступа пользователя;
 - хранения сведений статистики о пользователе.


Персистентные структуры данных (англ. persistent data structure) — это структуры данных, которые при внесении в них каких-то изменений сохраняют все свои предыдущие состояния и доступ к этим состояниям.


SSL 2.0	1995	Признан устаревшим в 2011 году (RFC 6176)
SSL 3.0	1996	Признан устаревшим в 2015 году (RFC 7568)
TLS 1.0	1999	Признан устаревшим в 2020 году
TLS 1.1	2006	Признан устаревшим в 2020 году
TLS 1.2	2008	
TLS 1.3	2018	


Клиент-серверная архитектура.
Клиент - потребитель услуг.
Сервер - пограммный процесс предоставления услуг.
Клиент-сервер — это соотношение между процессами, работающими на одной или на разных машинах.
Один сервер может предоставлять услуги сразу множеству клиентов одновременно, а также масштабироваться при необходимости горизонтально (по числу серверов и клиентов) или вертикально(по производительности и спектру услуг) и бесшовно обновляться по мере необходимости.
К плюсам можно отнести - централизованность, масштабируемость, производительность и информационную безопасность.
К минусам можно отнести - перегрузку трафика, наличие единой точки отказа, установка доп. ПО или драйверов на стороне клиента.


Утилиты / команды для работы с сетями в линукс.
telenet
nslookup
host 
dig
























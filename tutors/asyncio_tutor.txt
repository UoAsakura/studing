import asyncio

ensure_future - метод который принимает ассинхронную функцию и гарантирует её выполнение.

Цикл событий (event loop) - диспечер событий. По большей части всего лишь управляет выполнением различных задач: регистрирует поступление и запускает в подходящий момент.

Корутины - специальные функции, похожие на генераторы python, от которых ожидают (await), что они будут отдавать управление обратно в цикл событий. Необходимо, чтобы они были запущены именно через цикл событий.

future/promise — объекты, которые служат обещанием получить результат в будущем. Они представляют собой результат некоторой асинхронной операции, который ещё не известен на момент создания этого объекта, но будет доступен
позже.


await — Вы можете вызвать одну корутину из другой с помощью await. Это приостановит выполнение вызывающей корутины до тех пор, пока не завершится корутина, которую вы ждете.

asyncio.create_task() — Этот метод позволяет запустить корутину как задачу в цикле событий. Он возвращает объект asyncio. Task, который может быть использован для получения результата корутины или отмены её выполнения.

asyncio.run() — Это основной способ запуска основной корутины, который также управляет жизненным циклом цикла событий. Это должно использоваться как главная точка входа в асинхронную программу.

loop.run_until_complete() — старая версия, начиная с версии Python 3.7 и выше рекомендуется использовать asyncio.run()

asyncio. gather() - позволяет запустить несколько корутин одновременно и дождаться выполнения всех.

asyncio.wait() — еще один способ запустить несколько корутин и управлять ими, например, можно задать условие, при котором ожидание будет прервано.


























from time import sleep
from time import time
import asyncio

start = time()

async def spider(site_name):
    for page in range(1, 4):
        # await запускает механизм ожидания и передаёт управление из функции,
        # обратно в event loop.
        await asyncio.sleep(1)
        print(site_name, page)

spiders = [
    asyncio.ensure_future(spider("Blog")),
    asyncio.ensure_future(spider("News")),
    asyncio.ensure_future(spider("Forum"))
]


# Инициализируем объект, диспечера событий.
event_loop = asyncio.get_event_loop()
# Сообщаем диспечеру событий, что он должен выполняться до тех пор, 
# пока не завершаться все сопрограммы (корутины), из списка spiders.
event_loop.run_until_complete(asyncio.gather(*spiders))
# Обозначаем завершение цикла.
event_loop.close()

end = time()

print("{:.2F}".format(end - start))


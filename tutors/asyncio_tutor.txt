import asyncio

event loop - Диспечер событий
ensure_future - метод который принимает ассинхронную функцию и гарантирует её выполнение.



from time import sleep
from time import time
import asyncio

start = time()

async def spider(site_name):
    for page in range(1, 4):
        # await запускает механизм ожидания и передаёт управление из функции,
        # обратно в event loop.
        await asyncio.sleep(1)
        print(site_name, page)

spiders = [
    asyncio.ensure_future(spider("Blog")),
    asyncio.ensure_future(spider("News")),
    asyncio.ensure_future(spider("Forum"))
]


# Инициализируем объект, диспечера событий.
event_loop = asyncio.get_event_loop()
# Сообщаем диспечеру событий, что он должен выполняться до тех пор, 
# пока не завершаться все сопрограммы (корутины), из списка spiders.
event_loop.run_until_complete(asyncio.gather(*spiders))
# Обозначаем завершение цикла.
event_loop.close()

end = time()

print("{:.2F}".format(end - start))

